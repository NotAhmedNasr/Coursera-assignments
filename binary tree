/**** this program reads numbers from a file and populates them in a binary tree ****/
#include <stdio.h>
#include <stdlib.h>

// binary tree structure
struct binaryTree
{
    int data;
    struct binaryTree *left;
    struct binaryTree *right;
};

typedef struct binaryTree binaryTree;

// creates a new node
binaryTree *createNode(int data)
{
    binaryTree *tree = malloc(sizeof(binaryTree));
    tree->data = data;
    tree->left = NULL;
    tree->right = NULL;

    return tree;
}

// populates a tree from an array
binaryTree *populateTree(int *numbers, int size, int i, binaryTree *tree)
{
    if (i < size)
    {
        binaryTree *newNode = createNode(numbers[i]);
        tree = newNode;

        tree->left = populateTree(numbers, size, (2 * i) + 1, tree->left);
        tree->right = populateTree(numbers, size, (2 * i) + 2, tree->right);
    }
    return tree;
}

// prints tree in order left ------> root ------> right
void printTree(binaryTree *tree)
{
    if (tree == NULL)
    {
        return;
    }

    printTree(tree->left);
    printf("%d\n", tree->data);
    printTree(tree->right);
}

int main()
{
    int *numbers; // numbers array
    int size, i;
    binaryTree *tree;

    i = 0;

    FILE *inputFile = fopen("integers.txt", "r");    // input file

    fscanf(inputFile, "%d", &size);   // reading the size of the array

    numbers = malloc(size * sizeof(int));   // allocating memory for the array

    while(fscanf(inputFile,"%d", &numbers[i]) == 1)   // reading the rest of the numbers
    {
        i++;
    }

    tree = populateTree(numbers, size, 0, tree);

    printTree(tree);

    return 0;
}
